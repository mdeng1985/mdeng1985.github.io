<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[coding.me + github.io + 域名解析]]></title>
      <url>%2F2017%2F01%2F24%2Fdomian-analytical%2F</url>
      <content type="text"><![CDATA[说明这篇文章的目的就是将coding.me上的和github.io的个人博客和自己注册的域名关联起来，并且实现国内的用户访问域名的时候定向到 coding.me，国际的用户访问的时候，定向到github.io。 前期准备 有自己的github.io博客，参考”用hexo创建博客并发布到github pages“，假设为zs.github.io 有自己的coding.me博客，参考”利用hexo将博客同时推送到coding pages和github pages“, 假设为zs.coding.me 注册了自己的域名，我用的是godaddy 上注册的，假设为zs.com 在dnspod上注册账号， 用于解析域名 域名解析的相关概念域名解析的示意图如下图： 由图可见，在解析前github对应自己的ip,coding对应自己的ip，而且没有和自己的域名相互关联，两者是相互独立的。解析以后如下图 域名解析有两种方式：A记录和CNAME。A (Address) 记录是用来指定主机名（或域名）对应的IP地址记录。CNAME记录，即名记录。这种记录允许您将多个名字映射到另外一个域名。 由图可见，无论用户访问coding.io还是guihub.io，还是zs.com，都会定向到zs.com（这称为CNAME，相当于别名）； 然后zs.com会根据用户的ip来指向具体的ip，这称为A记录 （这是我自己的理解，不一定对）。 关于域名解析的概念性的文章，我推荐：GitHub Pages 绑定来自阿里云的域名 域名解析的具体步骤我参考的是”Hexo同时部署在Coding和GitHub上并使用DNSPod分流“，不做赘述。 测试是否分流成功http://www.webkaka.com/dns/]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo撰写博客教程]]></title>
      <url>%2F2017%2F01%2F24%2Fhexo-edit-blog%2F</url>
      <content type="text"><![CDATA[说明这篇文章的内容是利用Hexo撰写博客的相关内容，关于Hexo的配置和发布过程可以参见 用hexo创建博客并发布到github pages 创建新文章在命令行工具下进入到hexoBlog目录，运行： hexo new &quot;arc1&quot; 这样在source/_posts目录下就新建了一个arc1.md博客文件，打开以后有固定的格式： 12345---title: myarcdate: 2017-01-23 10:24:47tags:--- 其中title为博客的标题，tags为博客的标签，对于多个标签可以采用tags:[tag1,tag2]来实现。博客的撰写需要采用markdown语法，可以参见Markdown语法总结. 写完以后运行hexo s -p 3600 进行预览，没问题了再运行hexo generate hexo deploy发布到github pages 如果要添加私密文章或者草稿，则需要运行hexo new **draft** &quot;arc1&quot;, 这样在source/_drafts目录下新建了arc1.md，然后在本地可以强行预览草稿：hexo server --drafts 引用自己博客的文章A引用Bfg.md，则在A的md文件里输入： 1&#123;% post_link Bfg %&#125; 插入图片有两种典型的方式可以插入图片： - hexo的官方方式：这种方式需要将站点的配置文件_config.yml里设置：’post_asset_folder: true’, 然后在cmd输入: hexo new &quot;post-test&quot;, 这样 source\_posts 下建立post-test.md和post-test的文件夹。再把图片(比如：example.jpg)放到post-test这个文件夹里。post-test.md里进行调用的时候输入： 12&#123;% asset_img example.jpg aaa %&#125;` 但是，这种方法我没有试验成功。不知道怎么回事 基于Markdown语法的调用方式: ![](example.jpg的相对路径)。但是如果’post_asset_folder: true’情况下，如果把exaple.jpg放在上一级目录中是无法显示的。参考下面的测试结果(首页能不能显示还和具体模板有关系) 总结下有两种比较靠谱的方式: _config_yml中设置’post_asset_folder: false’，然后将所有的图片放到_post的同级目录images下，然后进行调用![](/images/example.jpg) _config_yml中设置’post_asset_folder: true’, 这样建立aa.md的时候就同时新建了aa的文件夹，将图片放aa文件夹下，aa.md里调用的时候为![](aa/compare_markdown_img.png) 测试的时候犯了一个很低级的错误，就是我将图片命名为example.jpg.jpg, 导致一直预览不到。另外基于Markdown语法的图片可能会在首页和归档页看不到，不过对于我而言不是很重要。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[利用hexo将博客同时推送到coding pages和github pages]]></title>
      <url>%2F2017%2F01%2F23%2Fhexo_coding_github%2F</url>
      <content type="text"><![CDATA[前言在文章用hexo创建博客并发布到github pages中给出了如何将hexo创建的博客推送到github，这篇文章在”用hexo创建博客并发布到github pages“的基础上，将hexo创建的 博客同时发布到github pages和coding pages. 之所以这么做是有连个目的：一是为了分流，使得国内的用户访问coding pages，国外的用户访问github pages； 另外一个原因就是github pages貌似不能被百度收录，所以还要用coding pages。 预备内容需要安装git软件，并生成公私匙，可以参考这篇文章和配置SSH公钥。这里只需要用公钥id_rsa.pub文件 在coding.net上创建仓库coding.net和github类似，它的page也分为用户页和项目页两大类( Coding Pages 介绍)。在coding上申请一个账户，假设用户名为zhangshan，创建一个仓库，名字为zhangshan.coding.me (这种格式对应的是用户页，如果需要创建项目页，则名字可以随意。但是我测试发现，如果创建项目页，博客预览的格式不理想，不知道怎么回事) 配置coding上的公钥配置的目的是在本地可以git直接将hexo博客推送到coding.net上。首先在用户主页，将本地id_rsa.pub文件的内容配置到coding上。如下图所示 配置完以后，在本地的git bash(不是cmd里)进行验证 ssh -T git@git.coding.net 会提示”The authenticity of host ‘git.coding.net (220.243.237.72)’ can’t be established…”，这时候直接按回车，直到提示”You’ve connected to Coding.net via SSH successfully!”, 就说明配置成功。 在hexo里配置coding的推送地址在hexo的站点目录下(我的为hexoBlog)打开_config.yml，将coding.net的git地址放进去，如下所示 1234567deploy: type: git repository: github: git@github.com:zhangshan/zhangshan.github.io.git coding: git@git.coding.net:zhangshan/zhangshan.coding.me.git branch: master message: hexo deploy 进行推送和github pages的推送方式一样，不做赘述, 可以参考(用hexo创建博客并发布到github pages) coding 的pages设置在coding.net进入到自己的zhangshan.coding.me点pages服务，然后”部署来源”为master分支，就可以在浏览器中输入http://zhangshan.coding.me/zhangshan.coding.me中浏览博客。 至此已经完成了hexo博客同时推送到coding pages和github pages的任务。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[用hexo创建博客并发布到github pages]]></title>
      <url>%2F2017%2F01%2F23%2FinstallHexo%2F</url>
      <content type="text"><![CDATA[安装和配置hexo首先需要安装node.js和git, 然后在命令行下安装hexo:npm install -g hexo 命令行进入到blog的上一级目录(比如说D://hexoRoot),创建一个hexo项目 hexo init hexoblog 这样，在hexoRoot目录下就创建了个hexoblog文件夹，进入到hexoBlog文件夹运行 hexo server 然后在浏览器窗口输入 http://localhost:4000/，就可以预览博客。 如果看不到，换一个端口试试，比如：hexo s -p 3600然后在浏览器窗口输入： http://localhost:3600/ 进行预览 最后安装插件（在命令行工具下,先进入到hexoBlog目录中执行下述命令）： 12345678910111213npm install hexo-generator-index --savenpm install hexo-generator-archive --savenpm install hexo-generator-category --savenpm install hexo-generator-tag --savenpm install hexo-server --savenpm install hexo-deployer-git --savenpm install hexo-deployer-heroku --savenpm install hexo-deployer-rsync --savenpm install hexo-deployer-openshift --savenpm install hexo-renderer-marked@0.2 --savenpm install hexo-renderer-stylus@0.2 --savenpm install hexo-generator-feed@1 --savenpm install hexo-generator-sitemap@1 --save 发布hexo博客到github pages github建立远程仓库 首先需要在github上建一个仓库名为username.github.io（username对应自己的github用户名，这里假设为zhangshan; github.io是则说明建的是个人用户页，不是项目页，两者区别参见：User, Organization, and Project Pages）.这个项目的网址为(可在项目里查看): zhangshan/zhangshan.github.io.git 本地配置远程的git仓库 在本地进入到新建的hexoBlog文件夹里，配置_config.yml文件： 1234deploy:type: gitrepository: git@github.com:zhangshan/zhangshan.github.io.gitbranch: master 然后执行如下命令： 123hexo cleanhexo generatehexo deploy 浏览器窗口查看 输入https://zhangshan.github.io/就可以看到博客效果 hexo博客的优化与美化安装主题安装主题的主要流程：将主题包下载下来，放到themes文件夹下，然后在_config.yml里进行配置， 以next主题为例进行说明： 在hexoBlog目录下进行git克隆 1git clone https://github.com/iissnan/hexo-theme-next themes/next 这样主题就自动下载到next文件夹了(也可以手动下载主题，然后解压缩) 修改hexoBlog目录下的_config.yml文件：theme: next 如果要修改next主题的一些配置，则需要修改next文件夹下的_config_yml文件。 我比较喜欢的两个主题有 next jacman 添加多说分享和评论功能开始以为添加百度分享分享到微博、微信等，但是发现next主题的百度分享不支持https的站点，就使用多说分享了。首先去多说用微信或者 qq登陆，设置shortname, 然后在站点的_config.yml（注意不是主题下的_config.yml）添加两行（第一行设置评论，第二行设置分享） duoshuo_shortname:自己设置的shortnameduoshuo_share: true 具体设置参见next主题的说明文档。如果还是不行的话，可能和其他插件冲突，比如 disqus，检查下主题下的_config.yml和站点下的_config.yml。 添加版权申明参考”为 Next 主题文末添加版权等信息“，只不过我的是在next\layout_macro的post.swig的{\% endmacro \%}那行前面加上如下的代码 1234567891011121314151617181920212223242526272829303132&lt;div class=&quot;page-footer&quot;&gt; &#123;% if not is_index %&#125; &lt;div id=&quot;eof&quot; class=&quot;print-invisible&quot;&gt; &lt;hr class=&quot;eof&quot;&gt; &lt;/div&gt; &lt;div class=&quot;copyright&quot; style=&quot;clear:both;&quot;&gt; &lt;p&gt;&lt;span&gt;本文标题:&lt;/span&gt;&lt;a href=&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot;&gt;&#123;&#123; page.title &#125;&#125;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;文章作者:&lt;/span&gt;&lt;a href=&quot;/&quot; title=&quot;访问 &#123;&#123; theme.author &#125;&#125; 的个人博客&quot;&gt;&#123;&#123; theme.author &#125;&#125;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;原始链接:&lt;/span&gt;&lt;a href=&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot; title=&quot;&#123;&#123; page.title &#125;&#125;&quot;&gt;&#123;&#123; page.permalink &#125;&#125;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;许可协议:&lt;/span&gt;&lt;i class=&quot;fa fa-creative-commons&quot;&gt;&lt;/i&gt; &lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc/4.0/&quot; title=&quot;Attribution-NonCommercial 4.0 International (CC BY-NC 4.0)&quot;&gt;Attribution-NonCommercial 4.0&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;转载请保留以上信息。&lt;/span&gt;&lt;/p&gt; &lt;/div&gt; &#123;% endif %&#125; &#123;% if not is_index and (post.prev or post.next) %&#125; &lt;div class=&quot;post-nav&quot;&gt; &lt;div class=&quot;post-nav-prev post-nav-item&quot;&gt; &#123;% if post.prev %&#125; &lt;a href=&quot;&#123;&#123; url_for(post.prev.path) &#125;&#125;&quot;&gt;&#123;&#123;post.prev.title&#125;&#125;&lt;/a&gt; &#123;% endif %&#125; &lt;/div&gt; &lt;div class=&quot;post-nav-next post-nav-item&quot;&gt; &#123;% if post.next %&#125; &lt;a href=&quot;&#123;&#123; url_for(post.next.path) &#125;&#125;&quot;&gt;&#123;&#123;post.next.title&#125;&#125;&lt;/a&gt; &#123;% endif %&#125; &lt;/div&gt; &lt;/div&gt; &#123;% endif %&#125; &lt;/div&gt; 站点的menu的链接失效都指向主页的解决方案站点的_config.yml里的必须为relative_link: false , 否则menu的那些链接都会失效。 git无法添加themes/next的解决方案在站点根目录(我的为hexoBlog)下，新建git仓库，发觉无法添加”themes/next”下的文件，会提示 fatal: Pathspec ‘themes/next/_config.yml’ is in submodule 这时候因为在next下有个submodule，需要先进入到这个目录运行更新子模块，命令如下： 123cd themes/nextgit --git-dir=.git --work-tree=. add .git --git-dir=.git --work-tree=. commit -m &quot;update next theme&quot; 然后返回到站点根目录，添加，具体如下： 1234cd ..cd ..git add themes/nextgit commit -m &quot;update blog&quot; 详见:Git: fatal: Pathspec is in submodule 添加到搜索引擎参考Hexo博客提交百度和Google收录，站点能够被google站点工具验证成功，一定要记得将验证文件放到主题下的source文件夹下（themes\next\source），而不是博客的source文件夹(hexoBlog\source)下，否则验证不成功。 百度站长网站 设置首页只显示预览，不显示全文设置主题下的_config.yml, 搜索auto_excerpt,将enable改成true。 使用过程中的FAQ 在博客里添加自己的社交链接 添加版权申明 我进行的相关配置总结 本地博客根目录下hexoBlog配置远程仓库的网址(修改站点配置文件_config.yml，参见前文) 创建”关于我”的页面 和主题有关的设置(我用的是next主题) 创建分类页面，创建完以后怎么对博客分类可以参考Hexo的分类和标签设置 创建关于我的页面 设置侧边栏头像 设置语言 添加社交链接 设置多说分享和多说评论，参见前文。 添加版权协议 添加版权申明,参见前文。 添加不蒜子统计 添加local search 添加MathJax 添加最新访客功能 添加到搜索引擎，参见前文 添加百度统计 首页仅不显示全文只显示预览 参考资料 hexo帮助文档 使用hexo-github搭建静态博客：对配置文件里的每项参数做出了说明 next theme的说明文档 Markdown 简单的世界]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Markdown语法总结]]></title>
      <url>%2F2017%2F01%2F23%2Fmarkdown_gram%2F</url>
      <content type="text"><![CDATA[@: [gitbookLearnBook, markdown_grammer] 分级标题 # 为一级标题## 为二级标题，以此类推 强调 **粗体** 粗体 *斜体* 斜体 ~~删除线~~ 删除线 字符块引用&gt; 你好 你好 代码块行内代码用两个反引号(标准键盘的ESC下的那个键)引着, 比如A=1 大块的代码用前后3个反引号引着，比如 12a=1b=2 也可以是每行代码前加4个空格(tab键)来实现 列表无序列表 *列表1 *列表2 *列表2的子列表(+号或者-号也可以) 列表1 列表2 列表2的子列表 有序列表：前面加具体的数字和顿号即可 任务列表 使用 - [ ] 和 - [x] [x] 已完成事项 [ ] 待办事项 超链接链接http网址： [bbc](https://bbc.com) bbc 链接本地文件： [for this project](docs/CONTRIBUTING.md) 则链接的是当前.md所在的目录的docs文件下的CONTRIBUTING.md文件。 [for this project](../CONTRIBUTING.md) 则链接的是当前.md所在的目录的上一级目录的CONTRIBUTING.md文件。 交叉引用 在B段落处引用的时候引用A段落的内容。首先在A的标题新建标签 A的标题{\#tagA} 然后在B处输入： [&quot;参见A&quot;](\#tagA) 插入图片和表格插入图片 ![github logo](/images/logo.png) 插入的logo.png位于当前的.md文件的目录的images文件夹下 插入表格 表格的列于列之间用|隔开，第一行与第二行之间用—–隔开，比如 | aa | bb | |:---|:---| | dd | ee || aa | bb | |:—|:—| | dd | ee | e 分割线插入三个***即可. 转义字符反斜杠\ 比如，由于#号在markdown语法里代表标题，如果要输入#号，则可以在前面加个反斜杠。 其他 输出空格：Markdown不识别半角空格，当需要空格时，按shift+Space,然后再按空格键即可. 两个空格强制换行 添加备注 &lt;!-- 备注 --&gt; LaTeX 公式流程图 和 时序图参考资料 Basic writing and formatting syntax Markdown Tutorial Markdown 语法基础及使用教程]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2017%2F01%2F23%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. $$a=3^2+\sqrt(3)$$ Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
  
  
</search>
