<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MLi&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://mdeng1985.github.io/"/>
  <updated>2017-01-26T04:43:31.736Z</updated>
  <id>http://mdeng1985.github.io/</id>
  
  <author>
    <name>Matthew Li</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>gitbook学习笔记(4):FAQ</title>
    <link href="http://mdeng1985.github.io/2017/01/25/gitbook-FAQ/"/>
    <id>http://mdeng1985.github.io/2017/01/25/gitbook-FAQ/</id>
    <published>2017-01-26T04:37:00.000Z</published>
    <updated>2017-01-26T04:43:31.736Z</updated>
    
    <content type="html"><![CDATA[<h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><ul>
<li>如果乱码，则需要将编码格式改成UTF-8</li>
<li><p>gitbook调用本地图片的时候，给出的路径为相对于调用的.md文件的路径，比如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">├─chapter1</div><div class="line">    ├─sec1.md</div><div class="line">├─imgs</div><div class="line">    ├─1.png</div></pre></td></tr></table></figure>
<p>如果sec1.md需要调用1.png，则给出的格式为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![Alt text](../imgs/1.png)</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;FAQ&quot;&gt;&lt;a href=&quot;#FAQ&quot; class=&quot;headerlink&quot; title=&quot;FAQ&quot;&gt;&lt;/a&gt;FAQ&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;如果乱码，则需要将编码格式改成UTF-8&lt;/li&gt;
&lt;li&gt;&lt;p&gt;gitbook调用本地图片的时候，给出的路径为相对于调
    
    </summary>
    
      <category term="gitbook" scheme="http://mdeng1985.github.io/categories/gitbook/"/>
    
    
      <category term="markdown" scheme="http://mdeng1985.github.io/tags/markdown/"/>
    
      <category term="gitbook" scheme="http://mdeng1985.github.io/tags/gitbook/"/>
    
  </entry>
  
  <entry>
    <title>Atom编辑器学习</title>
    <link href="http://mdeng1985.github.io/2017/01/25/atom_study/"/>
    <id>http://mdeng1985.github.io/2017/01/25/atom_study/</id>
    <published>2017-01-26T04:12:24.000Z</published>
    <updated>2017-01-26T04:15:36.313Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Atom基本操作"><a href="#Atom基本操作" class="headerlink" title="Atom基本操作"></a>Atom基本操作</h1><h2 id="寻找和运行可用的命令"><a href="#寻找和运行可用的命令" class="headerlink" title="寻找和运行可用的命令"></a>寻找和运行可用的命令</h2><p><code>ctrl+shift+p</code>可以呼出命令窗口，用于寻找和运行可令的命令</p>
<h2 id="管理包-package"><a href="#管理包-package" class="headerlink" title="管理包(package)"></a>管理包(package)</h2><ul>
<li><p><strong>查看和卸载package</strong>：<code>ctrl+shift+p</code>呼出命令栏，然后输入<code>settings view view installed packages</code>可以对已经安装的package进行查看并卸载</p>
</li>
<li><p><strong>安装工具包package</strong>有两种方式：</p>
<ul>
<li>通过菜单栏进行安装packge：atom主界面-file-settings，然后点击左边的install输入package关键词进行安装</li>
<li>通过命令行运行apm（Atom Package Manager）进行安装</li>
</ul>
</li>
<li><p><strong>开启或者关闭markdown的预览功能</strong>： <code>ctrl+shift+m</code> (需要安装markdown-preview，安装atom时默认是已经安装的)</p>
</li>
<li><p><strong>关闭拼写检查</strong>: 对于中文写作，关闭这个比较好。<code>ctrl+shift+p</code>然后输入spell check: toggle，然后点击关闭</p>
</li>
</ul>
<p><code>Ctrl + [</code> 对选中内容向左缩进 <code>Ctrl + ]</code> 对选中内容向右缩进</p>
<h1 id="Atom安装markdown的相关插件"><a href="#Atom安装markdown的相关插件" class="headerlink" title="Atom安装markdown的相关插件"></a>Atom安装markdown的相关插件</h1><h2 id="markdown-writer"><a href="#markdown-writer" class="headerlink" title="[markdown-writer]"></a>[markdown-writer]</h2><p><a href="https://atom.io/packages/markdown-writer" target="_blank" rel="external">官方主页</a></p>
<p>顾名思义，这个插件目的是辅助进行Markdown文档写作，可以通过菜单栏来添加标题、添加连接、添加图片。 比如插入图片，可以选择图片大小、自动复制图片到当前文件夹，方便书籍制作。</p>
<p>Markdown的两种方便的运行方式为快捷键和工具栏运行方法。</p>
<ul>
<li><strong>快捷键运行方式</strong> 这种运行方式直接通过菜单栏安装markdown-writer 即可，安装方法参见<a href="#atomBasic">“管理包”</a> 可以创建相应的atom快捷键来调用该插件的相应命令，首先<code>ctrl+shift+p</code>呼出命令栏，然后输入<code>Markdown Writer: Create Default Keymaps</code>则配置好了相应快捷键，在windows系统下的快捷键（通过<code>ctrl+shift+p</code>然后输入keymap查看）如下所示：</li>
</ul>
<blockquote>
<p>插入超链接:<code>shift-ctrl-K</code></p>
<p>插入图片： <code>shift-ctrl-I</code></p>
<p>斜体：<code>ctrl-i</code></p>
<p>粗体：<code>ctrl-b</code></p>
<p>代码块：<code>ctrl-&#39;</code></p>
<p>删除线：<code>ctrl-h</code>:</p>
<p>1级标题: <code>ctrl-1</code></p>
<p>2级标题: <code>ctrl-2</code> 以此类推</p>
</blockquote>
<p>更多的mwrkdown-writer快捷键可以参考： <a href="https://github.com/zhuochun/md-writer/wiki/Settings-for-Keymaps" target="_blank" rel="external">markdown-writer-wiki</a></p>
<ul>
<li><strong>工具栏运行方式</strong> 这种方式更为直观些，安装完以后会在atom的顶部（或者其他位置）显示markdown-writer的菜单栏。如下图所示。 <img src="/2017/01/25/atom_study/images/2017/01/writer_toolbar.png" alt="    "> 具体<a href="https://atom.io/packages/tool-bar-markdown-writer" target="_blank" rel="external">安装方式</a>需要在命令行下进行，首先打开cmd终端，切换本地的<code>.atm/packages</code>目录下，然后输入： <code>apm install tool-bar markdown-writer</code> 然后再次输入 <code>apm install tool-bar-markdown-writer</code> 重启atom即可。</li>
</ul>
<h2 id="markdown-preview"><a href="#markdown-preview" class="headerlink" title="markdown-preview"></a>markdown-preview</h2><p><a href="https://github.com/atom/markdown-preview" target="_blank" rel="external">官方主页</a></p>
<p>预览插件，安装atom的时候默认已经安装该插件</p>
<h2 id="markdown-scroll-sync"><a href="#markdown-scroll-sync" class="headerlink" title="markdown-scroll-sync"></a>markdown-scroll-sync</h2><p><a href="https://github.com/mark-hahn/markdown-scroll-sync" target="_blank" rel="external">官方主页</a></p>
<p>滚动预览插件，</p>
<h2 id="atomic-chrome"><a href="#atomic-chrome" class="headerlink" title="atomic chrome"></a>atomic chrome</h2><p>适用于利用markdown写公众号的，未深究,有兴趣可以参考:<a href="http://www.jianshu.com/p/b4c8479cfaa5" target="_blank" rel="external">Atom：优雅迷人的编辑神器</a></p>
<h2 id="markdown-toc"><a href="#markdown-toc" class="headerlink" title="markdown-toc"></a>markdown-toc</h2><p><a href="https://atom.io/packages/markdown-toc" target="_blank" rel="external">官方主页</a></p>
<p>生成目录的插件，安装完以后在Packages-markdown toc里进入使用</p>
<h1 id="Atom安装git的相关插件"><a href="#Atom安装git的相关插件" class="headerlink" title="Atom安装git的相关插件"></a>Atom安装git的相关插件</h1><ul>
<li><p>git plus</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2></li>
<li><p><a href="http://www.jianshu.com/p/ad3e737e5dc2" target="_blank" rel="external">Atom与markdown</a></p>
</li>
<li><p><a href="http://www.jianshu.com/p/b4c8479cfaa5" target="_blank" rel="external">Atom：优雅迷人的编辑神器</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Atom基本操作&quot;&gt;&lt;a href=&quot;#Atom基本操作&quot; class=&quot;headerlink&quot; title=&quot;Atom基本操作&quot;&gt;&lt;/a&gt;Atom基本操作&lt;/h1&gt;&lt;h2 id=&quot;寻找和运行可用的命令&quot;&gt;&lt;a href=&quot;#寻找和运行可用的命令&quot; class=&quot;
    
    </summary>
    
      <category term="gitbook" scheme="http://mdeng1985.github.io/categories/gitbook/"/>
    
    
      <category term="markdown" scheme="http://mdeng1985.github.io/tags/markdown/"/>
    
      <category term="atom" scheme="http://mdeng1985.github.io/tags/atom/"/>
    
  </entry>
  
  <entry>
    <title>Gitbook学习笔记(3):gitbook的常用插件</title>
    <link href="http://mdeng1985.github.io/2017/01/25/gitbook_plugin/"/>
    <id>http://mdeng1985.github.io/2017/01/25/gitbook_plugin/</id>
    <published>2017-01-26T04:08:24.000Z</published>
    <updated>2017-01-26T04:09:24.544Z</updated>
    
    <content type="html"><![CDATA[<h1 id="插件安装方法"><a href="#插件安装方法" class="headerlink" title="插件安装方法"></a>插件安装方法</h1><p>首先上<code>https://plugins.gitbook.com/</code>查找插件，比如说安装exercises，则在书籍的根目录创建book.json，格式如下：完成安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">     &quot;gitbook&quot; : &quot;3.2.2&quot;,</div><div class="line">     &quot;plugins&quot;: [&quot;exercises&quot;]</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>其中gitbook的版本号可以通过gitbook -version得到。如果要安装多个插件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">     &quot;gitbook&quot; : &quot;3.2.2&quot;,</div><div class="line">     &quot;plugins&quot;: [&quot;exercises&quot;,&quot;另外一个插件的名字&quot;]</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h1 id="我需要的一些插件"><a href="#我需要的一些插件" class="headerlink" title="我需要的一些插件"></a>我需要的一些插件</h1><ul>
<li><a href="https://plugins.gitbook.com/plugin/latex-codecogs" target="_blank" rel="external">latex-codecogs</a>(写数学公式)</li>
<li><a href="https://plugins.gitbook.com/plugin/mermaid" target="_blank" rel="external">mermaid</a>(画流程图)</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;插件安装方法&quot;&gt;&lt;a href=&quot;#插件安装方法&quot; class=&quot;headerlink&quot; title=&quot;插件安装方法&quot;&gt;&lt;/a&gt;插件安装方法&lt;/h1&gt;&lt;p&gt;首先上&lt;code&gt;https://plugins.gitbook.com/&lt;/code&gt;查找插件，比如说安装
    
    </summary>
    
      <category term="gitbook" scheme="http://mdeng1985.github.io/categories/gitbook/"/>
    
    
      <category term="gitbook" scheme="http://mdeng1985.github.io/tags/gitbook/"/>
    
  </entry>
  
  <entry>
    <title>Gitbook学习笔记(2): 发布书籍到github pages上</title>
    <link href="http://mdeng1985.github.io/2017/01/25/publish_gitbook/"/>
    <id>http://mdeng1985.github.io/2017/01/25/publish_gitbook/</id>
    <published>2017-01-26T04:05:24.000Z</published>
    <updated>2017-01-26T04:06:20.264Z</updated>
    
    <content type="html"><![CDATA[<h1 id="利用命令行工具创建github的项目页-project-pages"><a href="#利用命令行工具创建github的项目页-project-pages" class="headerlink" title="利用命令行工具创建github的项目页(project pages)"></a>利用命令行工具创建github的项目页(project pages)</h1><h2 id="仅发布网页文件"><a href="#仅发布网页文件" class="headerlink" title="仅发布网页文件"></a>仅发布网页文件</h2><p>假设已经通过gitbook-seve可以在本地创建了网页文件，在_book目录下。基本思路就是在 _book目录下创建一个仓库，将网页文件加到库的master分支下，然后推送到远程的github项目里，即可。</p>
<p>具体操作如下：</p>
<ul>
<li><p>本地进入到_book目录下，创建仓库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git init</div><div class="line">git add .</div><div class="line">git commit -m &quot;book version&quot; (这样就创建了个master分支)</div></pre></td></tr></table></figure>
</li>
<li><p>github网上上新建一个仓库，比如名叫book，假设我的用户名为aaa，那么它的网址为：<br><br><code>https://github.com/aaa/book.git</code></p>
</li>
<li><p>本地cmd,通过下述命令将仓库推送到远程</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git remote add origin https://github.com/aaa/book.git</div><div class="line">git  git push -u origin master</div></pre></td></tr></table></figure>
</li>
<li><p>github网上进入book这个项目，然后setting-github Pages里那一栏source选为master branch。</p>
</li>
<li><p>地址栏输入 <a href="https://aaa.github.io/book/" target="_blank" rel="external">https://aaa.github.io/book/</a>就可以显示了，取决于网络，有时候得等过几分钟。</p>
</li>
</ul>
<h2 id="发布网页文件和-md源文件"><a href="#发布网页文件和-md源文件" class="headerlink" title="发布网页文件和.md源文件"></a>发布网页文件和.md源文件</h2><p>如果要把网页的.md源文件也推送到github的仓库里的一种实现途径为：master分支里放.md文件、然后创建一个gh-pages分支放网页，再推送到github仓库里。</p>
<ul>
<li>第一步在github上新建一个空仓库,比如说book，链接为<code>https://github.com/aaa/book.git</code></li>
<li><p>然后在本地进入到源码根目录，假设已经通过gitbook serve命令创建了_book目录。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">├─Append</div><div class="line">├─chapter1</div><div class="line">├─chapter2</div><div class="line">└─_book</div><div class="line">  ├─Append</div><div class="line">  ├─chapter1</div><div class="line">  ├─chapter2</div><div class="line">  └─gitbook</div></pre></td></tr></table></figure>
<p>_book为网页的目录，其他文件夹为.md所在文件夹。</p>
</li>
<li><p>源码那个分支需要将_book屏蔽掉，因此新建一个.gitignore, 内容为_book,也可以根据个人需要添加需要屏蔽的后缀或者文件夹。然后新建仓库，将源码添加至master分支并推送到github，具体命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git init</div><div class="line">git add .</div><div class="line">git commit -m &quot;master&apos;s version&quot;</div><div class="line">git remote add origin https://github.com/aaa/book.git</div><div class="line">git push -u origin master</div></pre></td></tr></table></figure>
</li>
<li><p>在书籍_book录下新建仓库新建gh-pages分支，并将网页添加至该分支，最后推送到github。具体命令如下（#号后为说明）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">cd _book \#进入到_book目录</div><div class="line">git init \#新建仓库</div><div class="line">git -rm .gitignore \#删除.gitignore文件</div><div class="line">git checkout --orphan gh-pages \# 新建分支gh-pages</div><div class="line">git add . \#添加文件到该分支</div><div class="line">git commit -m &quot;html&apos;s branch&quot; \# 生成版本</div><div class="line">git remote add origin https://github.com/aaa/book.git \#给远程仓库设置昵称</div><div class="line">git push -u origin gh-pages \#推送gh-pages分支内容到远程</div></pre></td></tr></table></figure>
</li>
<li><p>最后在github进入到项目，settings-GitHub Pages-source-选择gh-pages，过一会打开Github pages那里给出的网址就可以看到网页了。</p>
</li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li><a href="https://help.github.com/categories/github-pages-basics" target="_blank" rel="external">github pages</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;利用命令行工具创建github的项目页-project-pages&quot;&gt;&lt;a href=&quot;#利用命令行工具创建github的项目页-project-pages&quot; class=&quot;headerlink&quot; title=&quot;利用命令行工具创建github的项目页(projec
    
    </summary>
    
      <category term="gitbook" scheme="http://mdeng1985.github.io/categories/gitbook/"/>
    
    
      <category term="gitbook" scheme="http://mdeng1985.github.io/tags/gitbook/"/>
    
  </entry>
  
  <entry>
    <title>Gitbook学习笔记(1):利用gitbook命令行工具创建和编译书籍</title>
    <link href="http://mdeng1985.github.io/2017/01/25/gitbook_cmd_study/"/>
    <id>http://mdeng1985.github.io/2017/01/25/gitbook_cmd_study/</id>
    <published>2017-01-26T04:04:24.000Z</published>
    <updated>2017-01-26T04:04:40.533Z</updated>
    
    <content type="html"><![CDATA[<h1 id="需要用到的软件"><a href="#需要用到的软件" class="headerlink" title="需要用到的软件"></a>需要用到的软件</h1><ul>
<li><a href="https://nodejs.org/en/" title="nodes.js" target="_blank" rel="external">nodes.js</a>；</li>
<li>gitbook命令行工具(用于创建和编译书籍，不用手动下载，安装完nodes.js通过命令行工具自动安装)；</li>
<li><a href="https://zh.wikipedia.org/wiki/Markdown" title="Markdown" target="_blank" rel="external">Markdown</a>语法编辑器（用于编辑书本的内容和格式。在线或者离线均可，可以参考：<a href="https://wizardforcel.gitbooks.io/markdown-simple-world/content/1.html" title="Markdown 编辑器推荐" target="_blank" rel="external">Markdown 编辑器推荐</a>）；</li>
</ul>
<h1 id="gitbook命令行工具安装"><a href="#gitbook命令行工具安装" class="headerlink" title="gitbook命令行工具安装"></a>gitbook命令行工具安装</h1><p>安装教程主要参考：<a href="https://toolchain.gitbook.com/setup.html" title="SIOgitBook" target="_blank" rel="external">SIOgitBook</a></p>
<ol>
<li><p>下载<a href="https://nodejs.org/en/" title="node.js" target="_blank" rel="external">node.js</a>的源文件并安装。安装完以后在系统CMD里输入:<code>node -v</code>查看node.jsb版本，以校验是否安装成功。</p>
</li>
<li><p>系统cmd里安装gitbook命令行工具: <code>npm install gitbook-cli -g</code>; 然后输入<code>gitbook -V</code> (V大写)查看gitbook命令行工具版本，以校验gitbook是否安装成功。返回版本号则说明安装成功。 如果需要卸载gitbook,则可以<code>npm uninstall -g gitbook</code></p>
</li>
</ol>
<h1 id="创建和编译一个只有目录的书籍"><a href="#创建和编译一个只有目录的书籍" class="headerlink" title="创建和编译一个只有目录的书籍"></a>创建和编译一个只有目录的书籍</h1><h2 id="创建书籍目录"><a href="#创建书籍目录" class="headerlink" title="创建书籍目录"></a>创建书籍目录</h2><p>在本地电脑上新建一个文件夹，比如test；然后CMD下进入该文件夹，输入</p>
<blockquote>
<p><code>gitbook init</code></p>
</blockquote>
<p>会在该文件夹下创建两个基本文件README.md和SUMMARY.md。其中README.md为书本的介绍，用编辑器打开以后默认内容为：</p>
<blockquote>
<p><code># Introduction</code></p>
</blockquote>
<p>SUMMARY.md为书籍的框架文件，用编辑器打开以后默认内容为：</p>
<blockquote>
<p><code># Summary</code> <code>*</code> <code>[Introduction]</code> <code>(README.md)</code></p>
</blockquote>
<p>其中<code># Summary</code>为固定格式，下一行声明的是生成一个标题为Introduction的章，里面的具体内容由README.md文件给出。</p>
<h2 id="编辑书籍目录和框架"><a href="#编辑书籍目录和框架" class="headerlink" title="编辑书籍目录和框架"></a>编辑书籍目录和框架</h2><p>系统默认的SUMMARY.md里的README.md实际上是书籍的介绍文件，因此我们自己撰写的时候可以另外创建一个.md文件（比如chap1_body.md）然后将Summary.md文件里的第二行改为 <code>* [Introduction]</code> <code>(chap1_body.md)</code>。</p>
<p>如果一个章节里有好几个小节，每个小节再由不同的.md文件给出，则可以参考<a href="https://yuzeshan.gitbooks.io/gitbook-studying/content/book/gitbook-cli.html" target="_blank" rel="external">下例</a>修改SUMMARY.md源代码为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># Summary</div><div class="line">* [基本安装](howtouse/README.md)</div><div class="line">   - [Node.js安装](howtouse/Nodejsinstall.md)</div><div class="line">   - [Gitbook安装](howtouse/gitbookinstall.md)</div><div class="line">   - [Gitbook命令行速览](howtouse/gitbookcli.md)</div></pre></td></tr></table></figure>
<p>这时候需要再次执行<code>gitbook init</code>，这样在当前目录下会创建名howtouse的子文件夹，该子文件夹下有README.md、Nodejsinstall.md、gitbookinstall.md和gitbookcli.md四个文件。值得注意的是，SUMMARY.md里</p>
<blockquote>
<ul>
<li>] 和 ( 中间不能有空格</li>
<li>[ 和前面的*和-要有空格。</li>
<li>运行完gitbook init，文件夹内已有的文件不会被覆盖，也不会被删除。</li>
</ul>
</blockquote>
<p>否则不能创建成功。</p>
<h2 id="编辑书籍的内容"><a href="#编辑书籍的内容" class="headerlink" title="编辑书籍的内容"></a>编辑书籍的内容</h2><p>上一小节里已经创建了书籍的框架，接下来就需要采用Markdown编辑器进行编辑添加内容到Nodejsinstall.md、gitbookinstall.md和gitbookcli.md、README.md里。</p>
<h2 id="编译生成和预览书籍"><a href="#编译生成和预览书籍" class="headerlink" title="编译生成和预览书籍"></a>编译生成和预览书籍</h2><p>最后需要在系统CMD下再次运行gitbook命令生成书籍，</p>
<blockquote>
<p>生成服务器？：<code>gitbook serve</code> 最后在浏览器网页地址栏输入<code>http://localhost:4000/</code>进行预览</p>
<p>生成静态网页：<code>gitbook build</code></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;需要用到的软件&quot;&gt;&lt;a href=&quot;#需要用到的软件&quot; class=&quot;headerlink&quot; title=&quot;需要用到的软件&quot;&gt;&lt;/a&gt;需要用到的软件&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://nodejs.org/en/&quot; title=&quot;node
    
    </summary>
    
      <category term="gitbook" scheme="http://mdeng1985.github.io/categories/gitbook/"/>
    
    
      <category term="gitbook" scheme="http://mdeng1985.github.io/tags/gitbook/"/>
    
  </entry>
  
  <entry>
    <title>Hexo学习4-hexo站点的丰富和优化</title>
    <link href="http://mdeng1985.github.io/2017/01/25/hexo-enhance/"/>
    <id>http://mdeng1985.github.io/2017/01/25/hexo-enhance/</id>
    <published>2017-01-25T16:12:56.000Z</published>
    <updated>2017-01-26T19:37:32.499Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h1><p>安装主题的主要流程：将主题包下载下来，放到themes文件夹下，然后在_config.yml里进行配置， 以<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">next</a>主题为例进行说明：</p>
<ul>
<li><p>在hexoBlog目录下进行git克隆</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure>
<p>这样主题就自动下载到next文件夹了(也可以手动下载主题，然后解压缩)</p>
</li>
<li><p>修改hexoBlog目录下的_config.yml文件：<code>theme: next</code></p>
</li>
<li><p>如果要修改next主题的一些配置，则需要修改next文件夹下的_config_yml文件。</p>
</li>
</ul>
<p>我比较喜欢的两个主题有</p>
<ul>
<li><a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">next</a></li>
<li><a href="https://github.com/wuchong/jacman" target="_blank" rel="external">jacman</a></li>
</ul>
<h1 id="添加多说分享和评论功能"><a href="#添加多说分享和评论功能" class="headerlink" title="添加多说分享和评论功能"></a>添加多说分享和评论功能</h1><p>开始以为添加百度分享分享到微博、微信等，但是发现next主题的百度分享不支持https的站点，就使用多说分享了。首先去<a href="duoshuo.com">多说</a>用微信或者 qq登陆，设置shortname, 然后在站点的_config.yml（注意不是主题下的_config.yml）添加两行（第一行设置评论，第二行设置分享）</p>
<blockquote>
<p><code>duoshuo_shortname:自己设置的shortname</code><br><br><code>duoshuo_share: true</code></p>
</blockquote>
<p>具体设置参见<a href="http://theme-next.iissnan.com/third-party-services.html" target="_blank" rel="external">next主题的说明文档</a>。如果还是不行的话，可能和其他插件冲突，比如 disqus，检查下主题下的_config.yml和站点下的_config.yml。</p>
<h1 id="添加版权申明"><a href="#添加版权申明" class="headerlink" title="添加版权申明"></a>添加版权申明</h1><p>参考”<a href="http://ixiusama.com/2016/02/15/%E4%B8%BA%20Next%20%E4%B8%BB%E9%A2%98%E6%96%87%E6%9C%AB%E6%B7%BB%E5%8A%A0%E7%89%88%E6%9D%83%E7%AD%89%E4%BF%A1%E6%81%AF/" target="_blank" rel="external">为 Next 主题文末添加版权等信息</a>“，只不过我的是在next\layout_macro的post.swig的<code>{\% endmacro \%}</code>那行前面加上如下的代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;page-footer&quot;&gt;</div><div class="line">    &#123;% if not is_index %&#125;</div><div class="line">      &lt;div id=&quot;eof&quot; class=&quot;print-invisible&quot;&gt;</div><div class="line">        &lt;hr class=&quot;eof&quot;&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line"></div><div class="line">      &lt;div class=&quot;copyright&quot; style=&quot;clear:both;&quot;&gt;</div><div class="line">         &lt;p&gt;&lt;span&gt;本文标题:&lt;/span&gt;&lt;a href=&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot;&gt;&#123;&#123; page.title &#125;&#125;&lt;/a&gt;&lt;/p&gt;</div><div class="line">         &lt;p&gt;&lt;span&gt;文章作者:&lt;/span&gt;&lt;a href=&quot;/&quot; title=&quot;访问 &#123;&#123; theme.author &#125;&#125; 的个人博客&quot;&gt;&#123;&#123; theme.author &#125;&#125;&lt;/a&gt;&lt;/p&gt;</div><div class="line">         &lt;p&gt;&lt;span&gt;原始链接:&lt;/span&gt;&lt;a href=&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot; title=&quot;&#123;&#123; page.title &#125;&#125;&quot;&gt;&#123;&#123; page.permalink &#125;&#125;&lt;/a&gt;&lt;/p&gt;</div><div class="line">         &lt;p&gt;&lt;span&gt;许可协议:&lt;/span&gt;&lt;i class=&quot;fa fa-creative-commons&quot;&gt;&lt;/i&gt; &lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc/4.0/&quot; title=&quot;Attribution-NonCommercial 4.0 International (CC BY-NC 4.0)&quot;&gt;Attribution-NonCommercial 4.0&lt;/a&gt;&lt;/p&gt;</div><div class="line">         &lt;p&gt;&lt;span&gt;转载请保留以上信息。&lt;/span&gt;&lt;/p&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    &#123;% endif %&#125;</div><div class="line"></div><div class="line">    &#123;% if not is_index and (post.prev or post.next) %&#125;</div><div class="line">      &lt;div class=&quot;post-nav&quot;&gt;</div><div class="line">        &lt;div class=&quot;post-nav-prev post-nav-item&quot;&gt;</div><div class="line">          &#123;% if post.prev %&#125;</div><div class="line">            &lt;a href=&quot;&#123;&#123; url_for(post.prev.path) &#125;&#125;&quot;&gt;&#123;&#123;post.prev.title&#125;&#125;&lt;/a&gt;</div><div class="line">          &#123;% endif %&#125;</div><div class="line">        &lt;/div&gt;</div><div class="line"></div><div class="line">        &lt;div class=&quot;post-nav-next post-nav-item&quot;&gt;</div><div class="line">          &#123;% if post.next %&#125;</div><div class="line">            &lt;a href=&quot;&#123;&#123; url_for(post.next.path) &#125;&#125;&quot;&gt;&#123;&#123;post.next.title&#125;&#125;&lt;/a&gt;</div><div class="line">          &#123;% endif %&#125;</div><div class="line">        &lt;/div&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    &#123;% endif %&#125;</div><div class="line"></div><div class="line">  &lt;/div&gt;</div></pre></td></tr></table></figure>
<h1 id="站点的menu的链接失效都指向主页的解决方案"><a href="#站点的menu的链接失效都指向主页的解决方案" class="headerlink" title="站点的menu的链接失效都指向主页的解决方案"></a>站点的menu的链接失效都指向主页的解决方案</h1><p>站点的_config.yml里的必须为<code>relative_link: false</code> , 否则menu的那些链接都会失效。</p>
<h1 id="git无法添加themes-next的解决方案"><a href="#git无法添加themes-next的解决方案" class="headerlink" title="git无法添加themes/next的解决方案"></a>git无法添加themes/next的解决方案</h1><p>在站点根目录(我的为hexoBlog)下，新建git仓库，发觉无法添加”themes/next”下的文件，会提示</p>
<p>fatal: Pathspec ‘themes/next/_config.yml’ is in submodule</p>
<p>这时候因为在next下有个submodule，需要先进入到这个目录运行更新子模块，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd themes/next</div><div class="line">git --git-dir=.git --work-tree=. add .</div><div class="line">git --git-dir=.git --work-tree=. commit -m &quot;update next theme&quot;</div></pre></td></tr></table></figure>
<p>然后返回到站点根目录，添加，具体如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd ..</div><div class="line">cd ..</div><div class="line">git add themes/next</div><div class="line">git commit -m &quot;update blog&quot;</div></pre></td></tr></table></figure>
<p>详见:<a href="http://stackoverflow.com/questions/24472596/git-fatal-pathspec-is-in-submodule" target="_blank" rel="external">Git: fatal: Pathspec is in submodule</a></p>
<h1 id="添加到搜索引擎"><a href="#添加到搜索引擎" class="headerlink" title="添加到搜索引擎"></a>添加到搜索引擎</h1><p>参考<a href="http://svend.cc/posts/22980/" target="_blank" rel="external">Hexo博客提交百度和Google收录</a>和<a href="http://www.franktly.com/2016/07/06/%E8%AE%A9Baidu%E5%92%8CGoogle%E6%94%B6%E5%BD%95Hexo%E5%8D%9A%E5%AE%A2" target="_blank" rel="external">让Baidu和Google收录Hexo博客</a>，站点能够被google站点工具验证成功，一定要记得将验证文件放到主题下的source文件夹下（themes\next\source），而不是博客的source文件夹(hexoBlog\source)下，否则验证不成功。</p>
<h1 id="设置首页只显示预览，不显示全文"><a href="#设置首页只显示预览，不显示全文" class="headerlink" title="设置首页只显示预览，不显示全文"></a>设置首页只显示预览，不显示全文</h1><p>设置主题下的_config.yml, 搜索<code>auto_excerpt</code>,将enable改成true。</p>
<h1 id="增加首页文章置顶的功能"><a href="#增加首页文章置顶的功能" class="headerlink" title="增加首页文章置顶的功能"></a>增加首页文章置顶的功能</h1><p>node_modules/hexo-generator-index/lib/generator.js里的内容为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line"></div><div class="line">var pagination = require(&apos;hexo-pagination&apos;);</div><div class="line"></div><div class="line">module.exports = function(locals) &#123;</div><div class="line">  var config = this.config;</div><div class="line">  var posts = locals.posts.sort(config.index_generator.order_by);</div><div class="line">  var paginationDir = config.pagination_dir || &apos;page&apos;;</div><div class="line"></div><div class="line">  return pagination(&apos;&apos;, posts, &#123;</div><div class="line">    perPage: config.index_generator.per_page,</div><div class="line">    layout: [&apos;index&apos;, &apos;archive&apos;],</div><div class="line">    format: paginationDir + &apos;/%d/&apos;,</div><div class="line">    data: &#123;</div><div class="line">      __index: true</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>将其替换成</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line">var pagination = require(&apos;hexo-pagination&apos;);</div><div class="line">module.exports = function(locals)&#123;</div><div class="line">  var config = this.config;</div><div class="line">  var posts = locals.posts;</div><div class="line">    posts.data = posts.data.sort(function(a, b) &#123;</div><div class="line">        if(a.top &amp;&amp; b.top) &#123; // 两篇文章top都有定义</div><div class="line">            if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排</div><div class="line">            else return b.top - a.top; // 否则按照top值降序排</div><div class="line">        &#125;</div><div class="line">        else if(a.top &amp;&amp; !b.top) &#123; // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</div><div class="line">            return -1;</div><div class="line">        &#125;</div><div class="line">        else if(!a.top &amp;&amp; b.top) &#123;</div><div class="line">            return 1;</div><div class="line">        &#125;</div><div class="line">        else return b.date - a.date; // 都没定义按照文章日期降序排</div><div class="line">    &#125;);</div><div class="line">  var paginationDir = config.pagination_dir || &apos;page&apos;;</div><div class="line">  return pagination(&apos;&apos;, posts, &#123;</div><div class="line">    perPage: config.index_generator.per_page,</div><div class="line">    layout: [&apos;index&apos;, &apos;archive&apos;],</div><div class="line">    format: paginationDir + &apos;/%d/&apos;,</div><div class="line">    data: &#123;</div><div class="line">      __index: true</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>然后的具体的博客的源文件(.md)开头加上top项，当top的值取0的时候，表示默认排序，即是按照时间顺序来排序，当top的值取1到无为置顶文件限大的时候，值最高的md文件即是置顶文章。比如说</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">title: 索引页</div><div class="line">date: 2017-01-25T10:12:56.000Z</div><div class="line">categories: 建站</div><div class="line">top: 2</div><div class="line">tags: hexo</div></pre></td></tr></table></figure>
<p>注意只能首页置顶，其他里还是置顶不了。参考资料：<a href="http://yanhuili.github.io/2016/11/21/hexo%E5%8D%9A%E6%96%87%E7%BD%AE%E9%A1%B6%E6%8A%80%E5%B7%A7/" target="_blank" rel="external">hexo博文置顶技巧</a></p>
<h1 id="修改文章内链接文本样式"><a href="#修改文章内链接文本样式" class="headerlink" title="修改文章内链接文本样式"></a>修改文章内链接文本样式</h1><p>修改文件<code>themes\next\source\css\_common\components\post\post.styl</code> ，添加如下css样式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.post-body a&#123;</div><div class="line">  color: #0593d3;</div><div class="line">  border-bottom: none;</div><div class="line"></div><div class="line">  &amp;:hover &#123;</div><div class="line">    color: #0477ab;</div><div class="line">    text-decoration: underline;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>参考<a href="http://www.wuxubj.cn/2016/08/Hexo-nexT-build-personal-blog/" target="_blank" rel="external">此处</a></p>
<h1 id="我进行的相关配置总结"><a href="#我进行的相关配置总结" class="headerlink" title="我进行的相关配置总结"></a>我进行的相关配置总结</h1><ul>
<li>本地博客根目录下hexoBlog配置远程仓库的网址(修改站点配置文件_config.yml，参见前文)</li>
<li><a href="https://github.com/iissnan/hexo-theme-next/wiki/%E5%88%9B%E5%BB%BA-%22%E5%85%B3%E4%BA%8E%E6%88%91%22-%E9%A1%B5%E9%9D%A2" target="_blank" rel="external">创建”关于我”的页面</a></li>
<li><p>和主题有关的设置(我用的是next主题)</p>
<ul>
<li><a href="https://github.com/iissnan/hexo-theme-next/wiki/%E5%88%9B%E5%BB%BA%E5%88%86%E7%B1%BB%E9%A1%B5%E9%9D%A2" target="_blank" rel="external">创建分类页面</a>，创建完以后怎么对博客分类可以参考<a href="http://ijiaober.github.io/2014/08/05/hexo/hexo-04/" target="_blank" rel="external">Hexo的分类和标签设置</a></li>
<li><a href="https://github.com/iissnan/hexo-theme-next/wiki/%E5%88%9B%E5%BB%BA-%22%E5%85%B3%E4%BA%8E%E6%88%91%22-%E9%A1%B5%E9%9D%A2" target="_blank" rel="external">创建关于我的页面</a></li>
<li><a href="https://github.com/iissnan/hexo-theme-next/wiki/%E8%AE%BE%E7%BD%AE%E4%BE%A7%E8%BE%B9%E6%A0%8F%E5%A4%B4%E5%83%8F" target="_blank" rel="external">设置侧边栏头像</a></li>
<li><a href="https://github.com/iissnan/hexo-theme-next/wiki/%E8%AE%BE%E7%BD%AE%E8%AF%AD%E8%A8%80" target="_blank" rel="external">设置语言</a></li>
<li><a href="https://github.com/iissnan/hexo-theme-next/wiki/%E8%AE%BE%E7%BD%AE%E4%BE%A7%E8%BE%B9%E6%A0%8F%E7%A4%BE%E4%BA%A4%E9%93%BE%E6%8E%A5" target="_blank" rel="external">添加社交链接</a></li>
<li>设置多说分享和多说评论，参见前文。</li>
<li><a href="https://qiutc.me/post/%E4%BD%BF%E7%94%A8hexo-github%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2.html" target="_blank" rel="external">添加版权协议</a></li>
<li>添加版权申明,参见前文。</li>
<li><a href="http://theme-next.iissnan.com/third-party-services.html#analytics-busuanzi" target="_blank" rel="external">添加不蒜子统计</a></li>
<li><a href="http://theme-next.iissnan.com/third-party-services.html#local-search" target="_blank" rel="external">添加local search</a></li>
<li><a href="http://theme-next.iissnan.com/third-party-services.html#mathjax-new-settings" target="_blank" rel="external">添加MathJax</a></li>
<li><a href="http://www.cylong.com/blog/2016/04/25/hexo-next-duoshuo/" target="_blank" rel="external">添加最新访客功能</a></li>
<li>添加到搜索引擎，参见前文</li>
<li><a href="http://theme-next.iissnan.com/third-party-services.html#analytics-baidu" target="_blank" rel="external">添加百度统计</a></li>
<li><a href="http://www.jianshu.com/p/393d067dba8d" target="_blank" rel="external">首页仅不显示全文只显示预览</a></li>
<li><a href="http://jaredforsyth.com/hexo-admin/" target="_blank" rel="external">添加hexo-admin插件，用于后台管理</a></li>
<li>添加首页置顶功能,参见前文</li>
<li>修改超链接的文本样式及颜色等，参见前文</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装主题&quot;&gt;&lt;a href=&quot;#安装主题&quot; class=&quot;headerlink&quot; title=&quot;安装主题&quot;&gt;&lt;/a&gt;安装主题&lt;/h1&gt;&lt;p&gt;安装主题的主要流程：将主题包下载下来，放到themes文件夹下，然后在_config.yml里进行配置， 以&lt;a href=
    
    </summary>
    
      <category term="建站" scheme="http://mdeng1985.github.io/categories/%E5%BB%BA%E7%AB%99/"/>
    
    
      <category term="hexo" scheme="http://mdeng1985.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>利用Hexo创建自己的站点并发布(索引页)</title>
    <link href="http://mdeng1985.github.io/2017/01/25/hexo-summary/"/>
    <id>http://mdeng1985.github.io/2017/01/25/hexo-summary/</id>
    <published>2017-01-25T16:12:56.000Z</published>
    <updated>2017-01-26T19:36:13.791Z</updated>
    
    <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>本文总结利用hexo创建和发布自己的站点的全过程。下面是具体的目录</p>
<ul>
<li><a href="/2017/01/23/installHexo/" title="一、用hexo创建博客并发布到github pages">一、用hexo创建博客并发布到github pages</a></li>
<li><a href="/2017/01/23/hexo_coding_github/" title="二、利用hexo将博客同时推送到coding pages和github pages">二、利用hexo将博客同时推送到coding pages和github pages</a></li>
<li><a href="/2017/01/24/domian-analytical/" title="三、coding.me + github.io + 域名解析">三、coding.me + github.io + 域名解析</a></li>
<li><a href="/2017/01/25/hexo-enhance/" title="四、hexo站点的丰富和优化">四、hexo站点的丰富和优化</a></li>
<li><a href="/2017/01/24/hexo-edit-blog/" title="五、Hexo撰写博客教程">五、Hexo撰写博客教程</a>
</li>
</ul>
<h1 id="总结与回顾"><a href="#总结与回顾" class="headerlink" title="总结与回顾"></a>总结与回顾</h1><h2 id="安装和配置hexo"><a href="#安装和配置hexo" class="headerlink" title="安装和配置hexo"></a>安装和配置hexo</h2><p>参见 <a href="/2017/01/23/installHexo/" title="Hexo学习1-用hexo创建博客并发布到github pages">Hexo学习1-用hexo创建博客并发布到github pages</a></p>
<h2 id="发布hexo博客到github-pages"><a href="#发布hexo博客到github-pages" class="headerlink" title="发布hexo博客到github pages"></a>发布hexo博客到github pages</h2><p>参见 <a href="/2017/01/23/installHexo/" title="Hexo学习1-用hexo创建博客并发布到github pages">Hexo学习1-用hexo创建博客并发布到github pages</a>。发布到远程仓库的三个命令为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo clean</div><div class="line">hexo generate</div><div class="line">hexo deploy</div></pre></td></tr></table></figure>
<p>如果仅是本地预览则<code>hexo s -p 3600</code>。注意：如果修改了_config.yml文件，则需要先<code>hexo clean</code>和<code>hexo generate</code>.</p>
<h2 id="发布hexo博客到coding-me的pages"><a href="#发布hexo博客到coding-me的pages" class="headerlink" title="发布hexo博客到coding.me的pages"></a>发布hexo博客到coding.me的pages</h2><p>参见 <a href="/2017/01/23/hexo_coding_github/" title="Hexo学习2-利用hexo将博客同时推送到coding pages和github pages">Hexo学习2-利用hexo将博客同时推送到coding pages和github pages</a>。</p>
<h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><p>绑定coding.me和github.io为同一个域名，并实现国内外分流，参考<a href="/2017/01/24/domian-analytical/" title="Hexo学习3-coding.me + github.io + 域名解析">Hexo学习3-coding.me + github.io + 域名解析</a></p>
<h2 id="hexo站点的丰富和优化"><a href="#hexo站点的丰富和优化" class="headerlink" title="hexo站点的丰富和优化"></a>hexo站点的丰富和优化</h2><p>参考<a href="/2017/01/25/hexo-enhance/" title="Hexo学习4-hexo站点的丰富和优化">Hexo学习4-hexo站点的丰富和优化</a></p>
<h2 id="hexo博客撰写相关"><a href="#hexo博客撰写相关" class="headerlink" title="hexo博客撰写相关"></a>hexo博客撰写相关</h2><p>参考<a href="/2017/01/24/hexo-edit-blog/" title="Hexo学习5-Hexo撰写博客教程">Hexo学习5-Hexo撰写博客教程</a></p>
<h2 id="hexo版本管理"><a href="#hexo版本管理" class="headerlink" title="hexo版本管理"></a>hexo版本管理</h2><p>在hexo博客的目录下git用于版本管理，由于next主题下有子模块，管理的时候需要进入到该模块进行添加，参见<a href="/2017/01/25/hexo-enhance/" title="Hexo学习4-hexo站点的丰富和优化">Hexo学习4-hexo站点的丰富和优化</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd themes/next</div><div class="line">git --git-dir=.git --work-tree=. add .</div><div class="line">git --git-dir=.git --work-tree=. commit -m &quot;update next theme&quot;</div></pre></td></tr></table></figure>
<p>然后返回到站点根目录，添加，具体如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd ..</div><div class="line">cd ..</div><div class="line">git add themes/next</div><div class="line">git commit -m &quot;update blog&quot;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h1&gt;&lt;p&gt;本文总结利用hexo创建和发布自己的站点的全过程。下面是具体的目录&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2017/01/23/in
    
    </summary>
    
      <category term="建站" scheme="http://mdeng1985.github.io/categories/%E5%BB%BA%E7%AB%99/"/>
    
    
      <category term="markdown" scheme="http://mdeng1985.github.io/tags/markdown/"/>
    
      <category term="coding.me" scheme="http://mdeng1985.github.io/tags/coding-me/"/>
    
      <category term="hexo" scheme="http://mdeng1985.github.io/tags/hexo/"/>
    
      <category term="域名解析" scheme="http://mdeng1985.github.io/tags/%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90/"/>
    
      <category term="git" scheme="http://mdeng1985.github.io/tags/git/"/>
    
      <category term="github" scheme="http://mdeng1985.github.io/tags/github/"/>
    
      <category term="index" scheme="http://mdeng1985.github.io/tags/index/"/>
    
  </entry>
  
  <entry>
    <title>Hexo学习3-coding.me + github.io + 域名解析</title>
    <link href="http://mdeng1985.github.io/2017/01/24/domian-analytical/"/>
    <id>http://mdeng1985.github.io/2017/01/24/domian-analytical/</id>
    <published>2017-01-25T05:09:13.000Z</published>
    <updated>2017-01-26T19:38:20.223Z</updated>
    
    <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>这篇文章的目的就是将coding.me上的和github.io的个人博客和自己注册的域名关联起来，并且实现国内的用户访问域名的时候定向到 coding.me，国际的用户访问的时候，定向到github.io。</p>
<h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><ul>
<li>有自己的github.io博客，参考”<a href="/2017/01/23/installHexo/" title="Hexo学习1-用hexo创建博客并发布到github pages">Hexo学习1-用hexo创建博客并发布到github pages</a>“，假设为zs.github.io</li>
<li>有自己的coding.me博客，参考”<a href="/2017/01/23/hexo_coding_github/" title="Hexo学习2-利用hexo将博客同时推送到coding pages和github pages">Hexo学习2-利用hexo将博客同时推送到coding pages和github pages</a>“, 假设为zs.coding.me</li>
<li>注册了自己的域名，我用的是<a href="https://www.godaddy.com" target="_blank" rel="external">godaddy</a> 上注册的，假设为zs.com</li>
<li>在dnspod上注册账号， 用于解析域名</li>
</ul>
<h1 id="域名解析的相关概念"><a href="#域名解析的相关概念" class="headerlink" title="域名解析的相关概念"></a>域名解析的相关概念</h1><p>域名解析的示意图如下图：</p>
<p><img src="/2017/01/24/domian-analytical/before_analy.png" alt=""></p>
<p>由图可见，在解析前github对应自己的ip,coding对应自己的ip，而且没有和自己的域名相互关联，两者是相互独立的。 域名解析有两种方式：A记录和CNAME。A (Address) 记录是用来指定主机名（或域名）对应的IP地址记录。CNAME记录，即名记录。这种记录允许您将多个名字映射到另外一个域名。 解析以后如下图</p>
<p><img src="/2017/01/24/domian-analytical/after_analy.png" alt=""></p>
<p>相应的配置截图如下：</p>
<p><img src="/2017/01/24/domian-analytical/dns_set.png" alt=""></p>
<p>如下几点说明：</p>
<ul>
<li>主机记录中为@，表示zs.com指向另外的域名或者ip，如果为www则表示www.zs.com（为zs.com二级域名）指向另外的域名或者ip。同样可以设置为blog.zs.com</li>
<li>图中5是把自己的站点提交给百度搜索用的，和本文没有关系，参考<a href="http://www.franktly.com/2016/07/06/%E8%AE%A9Baidu%E5%92%8CGoogle%E6%94%B6%E5%BD%95Hexo%E5%8D%9A%E5%AE%A2/" target="_blank" rel="external">此处</a></li>
<li>CNAME的解析的优先级要比A记录的解析要高。</li>
<li>其中3和4是系统自带的不用管</li>
<li>8中的ip参考<a href="https://help.github.com/articles/setting-up-an-apex-domain" target="_blank" rel="external">github的官网</a></li>
</ul>
<p>关于域名解析的概念性的文章，我推荐：<a href="http://quantumman.me/blog/setting-up-a-domain-with-gitHub-pages.html" target="_blank" rel="external">GitHub Pages 绑定来自阿里云的域名</a></p>
<h1 id="域名解析的具体步骤"><a href="#域名解析的具体步骤" class="headerlink" title="域名解析的具体步骤"></a>域名解析的具体步骤</h1><p>我参考的是”<a href="http://www.franktly.com/2016/01/09/%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-2/" target="_blank" rel="external">Hexo同时部署在Coding和GitHub上并使用DNSPod分流</a>“，不做赘述。</p>
<p>最后需要绑定下，进入coding的pages里绑定域名为zs.com。这样不管输入zs.coding.me还是zs.github.io都会跳转到zs.com</p>
<h1 id="测试是否分流成功"><a href="#测试是否分流成功" class="headerlink" title="测试是否分流成功"></a>测试是否分流成功</h1><p>在这个<a href="http://tools.fastweb.com.cn/Index/Mdig" target="_blank" rel="external">网站</a>进去查询，输入域名和类型CNAME，得到如下的结果</p>
<p><img src="/2017/01/24/domian-analytical/dns1.png" alt=""></p>
<p>可见国内分流成功，国外的分流查询可以通过”<a href="http://www.webkaka.com/dns/" target="_blank" rel="external">DNS查询</a>“查询得到</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h1&gt;&lt;p&gt;这篇文章的目的就是将coding.me上的和github.io的个人博客和自己注册的域名关联起来，并且实现国内的用户访问域名的时候定向到 c
    
    </summary>
    
      <category term="建站" scheme="http://mdeng1985.github.io/categories/%E5%BB%BA%E7%AB%99/"/>
    
    
      <category term="coding.me" scheme="http://mdeng1985.github.io/tags/coding-me/"/>
    
      <category term="github pages" scheme="http://mdeng1985.github.io/tags/github-pages/"/>
    
      <category term="github.io" scheme="http://mdeng1985.github.io/tags/github-io/"/>
    
      <category term="hexo" scheme="http://mdeng1985.github.io/tags/hexo/"/>
    
      <category term="域名解析" scheme="http://mdeng1985.github.io/tags/%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Hexo学习5-Hexo撰写博客教程</title>
    <link href="http://mdeng1985.github.io/2017/01/24/hexo-edit-blog/"/>
    <id>http://mdeng1985.github.io/2017/01/24/hexo-edit-blog/</id>
    <published>2017-01-24T16:50:51.000Z</published>
    <updated>2017-01-26T19:37:13.286Z</updated>
    
    <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>这篇文章的内容是利用Hexo撰写博客的相关内容，关于Hexo的配置和发布过程可以参见 <a href="/2017/01/23/installHexo/" title="Hexo学习1-用hexo创建博客并发布到github pages">Hexo学习1-用hexo创建博客并发布到github pages</a></p>
<h1 id="创建新文章"><a href="#创建新文章" class="headerlink" title="创建新文章"></a>创建新文章</h1><p>在命令行工具下进入到hexoBlog目录，运行：</p>
<p><code>hexo new &quot;arc1&quot;</code></p>
<p>这样在source/_posts目录下就新建了一个arc1.md博客文件，打开以后有固定的格式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: myarc</div><div class="line">date: 2017-01-23 10:24:47</div><div class="line">tags:</div><div class="line">---</div></pre></td></tr></table></figure>
<p>其中title为博客的标题，tags为博客的标签，对于多个标签可以采用<code>tags:[tag1,tag2]</code>来实现。博客的撰写需要采用markdown语法，可以参见<a href="/2017/01/23/markdown_gram/" title="Markdown语法总结">Markdown语法总结</a>. 写完以后运行<code>hexo s -p 3600</code> 进行预览，没问题了再运行<code>hexo generate</code> <code>hexo deploy</code>发布到github pages</p>
<p>如果要添加私密文章或者草稿，则需要运行<code>hexo new **draft** &quot;arc1&quot;</code>, 这样在source/_drafts目录下新建了arc1.md，然后在本地可以强行预览草稿：<code>hexo server --drafts</code></p>
<h1 id="引用自己博客的文章"><a href="#引用自己博客的文章" class="headerlink" title="引用自己博客的文章"></a>引用自己博客的文章</h1><p>A引用Bfg.md，则在A的md文件里输入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% post_link Bfg %&#125;</div></pre></td></tr></table></figure>
<h1 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h1><p>有两种典型的方式可以插入图片： -</p>
<ul>
<li><p><a href="https://hexo.io/zh-cn/docs/asset-folders.html" target="_blank" rel="external">hexo的官方方式</a>：这种方式需要将站点的配置文件_config.yml里设置：’post_asset_folder: true’, 然后在cmd输入: <code>hexo new &quot;post-test&quot;</code>, 这样 <code>source\_posts</code> 下建立post-test.md和post-test的文件夹。再把图片(比如：<code>example.jpg</code>)放到post-test这个文件夹里。post-test.md里进行调用的时候输入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&#123;% asset_img example.jpg aaa %&#125;</div><div class="line">`</div></pre></td></tr></table></figure>
<p>但是，这种方法我没有试验成功。不知道怎么回事</p>
</li>
<li><p>基于Markdown语法的调用方式: <code>![](example.jpg的相对路径)</code>。但是如果’post_asset_folder: true’情况下，如果把exaple.jpg放在上一级目录中是无法显示的。参考下面的测试结果(首页能不能显示还和具体模板有关系)</p>
</li>
</ul>
<p><img src="/2017/01/24/hexo-edit-blog/compare_markdown_img.png" alt=""></p>
<p>总结下有两种比较靠谱的方式:</p>
<ul>
<li>_config_yml中设置’post_asset_folder: false’，然后将所有的图片放到_post的同级目录images下，然后进行调用<code>![](/images/example.jpg)</code></li>
<li>_config_yml中设置’post_asset_folder: true’, 这样建立aa.md的时候就同时新建了aa的文件夹，将图片放aa文件夹下，aa.md里调用的时候为<code>![](aa/compare_markdown_img.png)</code></li>
</ul>
<p>测试的时候犯了一个很低级的错误，就是我将图片命名为example.jpg.jpg, 导致一直预览不到。另外基于Markdown语法的图片可能会在首页和归档页看不到，不过对于我而言不是很重要。</p>
<h1 id="Markdown-语法"><a href="#Markdown-语法" class="headerlink" title="Markdown 语法"></a>Markdown 语法</h1><p>参见<a href="/2017/01/23/markdown_gram/" title="Markdown语法总结">Markdown语法总结</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h1&gt;&lt;p&gt;这篇文章的内容是利用Hexo撰写博客的相关内容，关于Hexo的配置和发布过程可以参见 &lt;a href=&quot;/2017/01/23/instal
    
    </summary>
    
      <category term="建站" scheme="http://mdeng1985.github.io/categories/%E5%BB%BA%E7%AB%99/"/>
    
    
      <category term="hexo" scheme="http://mdeng1985.github.io/tags/hexo/"/>
    
      <category term="git" scheme="http://mdeng1985.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Hexo学习2-利用hexo将博客同时推送到coding pages和github pages</title>
    <link href="http://mdeng1985.github.io/2017/01/23/hexo_coding_github/"/>
    <id>http://mdeng1985.github.io/2017/01/23/hexo_coding_github/</id>
    <published>2017-01-23T15:58:24.000Z</published>
    <updated>2017-01-26T19:36:57.012Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在文章<a href="/2017/01/23/installHexo/" title="Hexo学习1-用hexo创建博客并发布到github pages">Hexo学习1-用hexo创建博客并发布到github pages</a>中给出了如何将hexo创建的博客推送到github，这篇文章在”<a href="/2017/01/23/installHexo/" title="Hexo学习1-用hexo创建博客并发布到github pages">Hexo学习1-用hexo创建博客并发布到github pages</a>“的基础上，将hexo创建的 博客同时发布到github pages和coding pages. 之所以这么做是有连个目的：一是为了分流，使得国内的用户访问coding pages，国外的用户访问github pages； 另外一个原因就是github pages貌似不能被百度收录，所以还要用coding pages。</p>
<h1 id="预备内容"><a href="#预备内容" class="headerlink" title="预备内容"></a>预备内容</h1><p>需要安装git软件，并生成公私匙，可以参考<a href="http://itfan.github.io/#show/2013-06-07-use-github-on-windows" target="_blank" rel="external">这篇文章</a>和<a href="https://coding.net/help/doc/git/ssh-key.html" target="_blank" rel="external">配置SSH公钥</a>。这里只需要用公钥<code>id_rsa.pub</code>文件</p>
<h1 id="在coding-net上创建仓库"><a href="#在coding-net上创建仓库" class="headerlink" title="在coding.net上创建仓库"></a>在coding.net上创建仓库</h1><p>coding.net和github类似，它的page也分为用户页和项目页两大类( <a href="https://coding.net/help/doc/pages/index.html" target="_blank" rel="external">Coding Pages 介绍</a>)。在coding上申请一个账户，假设用户名为zhangshan，创建一个仓库，名字为<code>zhangshan.coding.me</code> (这种格式对应的是用户页，如果需要创建项目页，则名字可以随意。但是我测试发现，<strong>如果创建项目页，博客预览的格式不理想，不知道怎么回事</strong>)</p>
<h1 id="配置coding上的公钥"><a href="#配置coding上的公钥" class="headerlink" title="配置coding上的公钥"></a>配置coding上的公钥</h1><p>配置的目的是在本地可以git直接将hexo博客推送到coding.net上。首先在<a href="https://coding.net/user" target="_blank" rel="external">用户主页</a>，将本地<code>id_rsa.pub</code>文件的内容配置到coding上。如下图所示 <img src="/2017/01/23/hexo_coding_github/ssh_key.png" alt=""></p>
<p>配置完以后，在本地的git bash(不是cmd里)进行验证</p>
<p><code>ssh -T git@git.coding.net</code></p>
<p>会提示”The authenticity of host ‘git.coding.net (220.243.237.72)’ can’t be established…”，这时候直接按回车，直到提示”You’ve connected to Coding.net via SSH successfully!”, 就说明配置成功。</p>
<h1 id="在hexo里配置coding的推送地址"><a href="#在hexo里配置coding的推送地址" class="headerlink" title="在hexo里配置coding的推送地址"></a>在hexo里配置coding的推送地址</h1><p>在hexo的站点目录下(我的为hexoBlog)打开_config.yml，将coding.net的git地址放进去，如下所示</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repository:</div><div class="line">    github: git@github.com:zhangshan/zhangshan.github.io.git</div><div class="line">    coding: git@git.coding.net:zhangshan/zhangshan.coding.me.git</div><div class="line">  branch: master</div><div class="line">  message: hexo deploy</div></pre></td></tr></table></figure>
<h1 id="进行推送"><a href="#进行推送" class="headerlink" title="进行推送"></a>进行推送</h1><p>和github pages的推送方式一样，不做赘述, 可以参考(<a href="/2017/01/23/installHexo/" title="Hexo学习1-用hexo创建博客并发布到github pages">Hexo学习1-用hexo创建博客并发布到github pages</a>)</p>
<h1 id="coding-的pages设置"><a href="#coding-的pages设置" class="headerlink" title="coding 的pages设置"></a>coding 的pages设置</h1><p>在coding.net进入到自己的zhangshan.coding.me点pages服务，然后”部署来源”为master分支，就可以在浏览器中输入<code>http://zhangshan.coding.me/zhangshan.coding.me</code>中浏览博客。</p>
<p>至此已经完成了hexo博客同时推送到coding pages和github pages的任务。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在文章&lt;a href=&quot;/2017/01/23/installHexo/&quot; title=&quot;Hexo学习1-用hexo创建博客并发布到gith
    
    </summary>
    
      <category term="建站" scheme="http://mdeng1985.github.io/categories/%E5%BB%BA%E7%AB%99/"/>
    
    
      <category term="github pages" scheme="http://mdeng1985.github.io/tags/github-pages/"/>
    
      <category term="hexo" scheme="http://mdeng1985.github.io/tags/hexo/"/>
    
      <category term="git" scheme="http://mdeng1985.github.io/tags/git/"/>
    
      <category term="coding pages" scheme="http://mdeng1985.github.io/tags/coding-pages/"/>
    
  </entry>
  
  <entry>
    <title>Hexo学习1-用hexo创建博客并发布到github pages</title>
    <link href="http://mdeng1985.github.io/2017/01/23/installHexo/"/>
    <id>http://mdeng1985.github.io/2017/01/23/installHexo/</id>
    <published>2017-01-23T15:58:24.000Z</published>
    <updated>2017-01-26T19:37:38.397Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h1 id="安装和配置hexo"><a href="#安装和配置hexo" class="headerlink" title="安装和配置hexo"></a>安装和配置hexo</h1><p>首先需要安装<a href="https://nodejs.org/zh-cn/" target="_blank" rel="external">node.js</a>和<a href="https://git-scm.com/" target="_blank" rel="external">git</a>, 然后在命令行(或者window powerShell)下安装hexo:<br><br><code>npm install -g hexo</code></p>
<p>命令行进入到blog的上一级目录(比如说D://hexoRoot),创建一个hexo项目</p>
<p><code>hexo init hexoblog</code></p>
<p>这样，在hexoRoot目录下就创建了个hexoblog文件夹，进入到hexoBlog文件夹运行</p>
<p><code>hexo server</code></p>
<p>然后在浏览器窗口输入 <code>http://localhost:4000/</code>，就可以预览博客。</p>
<p>如果看不到，换一个端口试试，比如：<br><br><code>hexo s -p 3600</code><br><br>然后在浏览器窗口输入：</p>
<p><code>http://localhost:3600/</code><br></p>
<p>进行预览 最后安装插件（在命令行工具下,先进入到hexoBlog目录中执行下述命令）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-index --save</div><div class="line">npm install hexo-generator-archive --save</div><div class="line">npm install hexo-generator-category --save</div><div class="line">npm install hexo-generator-tag --save</div><div class="line">npm install hexo-server --save</div><div class="line">npm install hexo-deployer-git --save</div><div class="line">npm install hexo-deployer-heroku --save</div><div class="line">npm install hexo-deployer-rsync --save</div><div class="line">npm install hexo-deployer-openshift --save</div><div class="line">npm install hexo-renderer-marked@0.2 --save</div><div class="line">npm install hexo-renderer-stylus@0.2 --save</div><div class="line">npm install hexo-generator-feed@1 --save</div><div class="line">npm install hexo-generator-sitemap@1 --save</div></pre></td></tr></table></figure>
<h1 id="发布hexo博客到github-pages"><a href="#发布hexo博客到github-pages" class="headerlink" title="发布hexo博客到github pages"></a>发布hexo博客到github pages</h1><ul>
<li><strong>github建立远程仓库</strong></li>
</ul>
<p>首先需要在github上建一个仓库名为username.github.io（username对应自己的github用户名，这里假设为zhangshan; github.io是则说明建的是个人用户页，不是项目页，两者区别参见：<a href="https://help.github.com/articles/user-organization-and-project-pages/" target="_blank" rel="external">User, Organization, and Project Pages</a>）.这个项目的网址为(可在项目里查看):</p>
<blockquote>
<p><code>zhangshan/zhangshan.github.io.git</code></p>
</blockquote>
<ul>
<li><strong>本地配置远程的git仓库</strong></li>
</ul>
<p>在本地进入到新建的hexoBlog文件夹里，配置_config.yml文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">type: git</div><div class="line">repository: git@github.com:zhangshan/zhangshan.github.io.git</div><div class="line">branch: master</div></pre></td></tr></table></figure>
<p>然后执行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo clean</div><div class="line">hexo generate</div><div class="line">hexo deploy</div></pre></td></tr></table></figure>
<ul>
<li><strong>浏览器窗口查看</strong></li>
</ul>
<p>输入<code>https://zhangshan.github.io/</code>就可以看到博客效果</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><p><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="external">hexo帮助文档</a></p>
</li>
<li><p><a href="https://qiutc.me/post/%E4%BD%BF%E7%94%A8hexo-github%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2.html" target="_blank" rel="external">使用hexo-github搭建静态博客：对配置文件里的每项参数做出了说明</a></p>
</li>
<li><p><a href="http://theme-next.iissnan.com/" target="_blank" rel="external">next theme的说明文档</a></p>
</li>
<li><p><a href="https://wizardforcel.gitbooks.io/markdown-simple-world/content/hexo-tutor-7.html" target="_blank" rel="external">Markdown 简单的世界</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;安装和配置hexo&quot;&gt;&lt;a href=&quot;#安装和配置hexo&quot; class=&quot;headerlink&quot; title=&quot;安装和配置hexo&quot;&gt;&lt;/a&gt;安装和配置hexo&lt;/h1&gt;&lt;p&gt;首先需要安装&lt;a href=&quot;https://nodejs.org/zh-
    
    </summary>
    
      <category term="建站" scheme="http://mdeng1985.github.io/categories/%E5%BB%BA%E7%AB%99/"/>
    
    
      <category term="github pages" scheme="http://mdeng1985.github.io/tags/github-pages/"/>
    
      <category term="hexo" scheme="http://mdeng1985.github.io/tags/hexo/"/>
    
      <category term="git" scheme="http://mdeng1985.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法总结</title>
    <link href="http://mdeng1985.github.io/2017/01/23/markdown_gram/"/>
    <id>http://mdeng1985.github.io/2017/01/23/markdown_gram/</id>
    <published>2017-01-23T15:58:00.000Z</published>
    <updated>2017-01-26T04:36:36.446Z</updated>
    
    <content type="html"><![CDATA[<p>@: [gitbookLearnBook, markdown_grammer] <!-- gitbookLearnBook 为本地的书籍的标题 --> <!-- markdown_grammer为本地的.md名字 --></p>
<h1 id="分级标题"><a href="#分级标题" class="headerlink" title="分级标题"></a>分级标题</h1><blockquote>
<p><code>#</code> 为一级标题<br><br><code>##</code> 为二级标题，以此类推</p>
</blockquote>
<h1 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h1><blockquote>
<p><code>**粗体**</code> <strong>粗体</strong></p>
<p><code>*斜体*</code> <em>斜体</em></p>
<p><code>~~删除线~~</code> <del>删除线</del></p>
</blockquote>
<h1 id="字符块引用"><a href="#字符块引用" class="headerlink" title="字符块引用"></a>字符块引用</h1><p><code>&gt;</code> 你好</p>
<blockquote>
<p>你好</p>
</blockquote>
<h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><p>行内代码用两个反引号(标准键盘的ESC下的那个键)引着, 比如<code>A=1</code></p>
<p>大块的代码用前后3个反引号引着，比如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a=1</div><div class="line">b=2</div></pre></td></tr></table></figure>
<p>也可以是每行代码前加4个空格(tab键)来实现</p>
<h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p><strong>无序列表</strong> <code>*</code>列表1 <code>*</code>列表2 <code>*</code>列表2的子列表(+号或者-号也可以)</p>
<blockquote>
<ul>
<li>列表1</li>
<li><p>列表2</p>
<ul>
<li>列表2的子列表</li>
</ul>
</li>
</ul>
</blockquote>
<p><strong>有序列表</strong>：前面加具体的数字和顿号即可</p>
<p><strong>任务列表</strong></p>
<p>使用 <code>- [ ]</code> 和 <code>- [x]</code></p>
<ul>
<li>[x] 已完成事项</li>
<li>[ ] 待办事项</li>
</ul>
<h1 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h1><p><strong>链接http网址</strong>： <code>[bbc](https://bbc.com)</code></p>
<blockquote>
<p><a href="https://bbc.com" target="_blank" rel="external">bbc</a></p>
</blockquote>
<p><strong>链接本地文件</strong>： <code>[for this project](docs/CONTRIBUTING.md)</code></p>
<p>则链接的是当前.md所在的目录的docs文件下的CONTRIBUTING.md文件。</p>
<p><code>[for this project](../CONTRIBUTING.md)</code></p>
<p>则链接的是当前.md所在的目录的上一级目录的CONTRIBUTING.md文件。</p>
<p><strong>交叉引用</strong></p>
<p>在B段落处引用的时候引用A段落的内容。首先在A的标题新建标签</p>
<p><code>A的标题{\#tagA}</code></p>
<p>然后在B处输入：</p>
<p><code>[&quot;参见A&quot;](\#tagA)</code></p>
<h1 id="插入图片和表格"><a href="#插入图片和表格" class="headerlink" title="插入图片和表格"></a>插入图片和表格</h1><p><strong>插入图片</strong> <code>![github logo](/images/logo.png)</code></p>
<p>插入的logo.png位于当前的.md文件的目录的images文件夹下</p>
<p><strong>插入表格</strong></p>
<p>表格的列于列之间用|隔开，第一行与第二行之间用—–隔开，比如</p>
<p><code>| aa | bb | |:---|:---| | dd | ee |</code>| aa | bb | |:—|:—| | dd | ee | e</p>
<h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><p>插入三个<code>***</code>即可.</p>
<h1 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h1><p>反斜杠\ 比如，由于#号在markdown语法里代表标题，如果要输入#号，则可以在前面加个反斜杠。</p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ol>
<li>输出空格：Markdown不识别半角空格，当需要空格时，按shift+Space,然后再按空格键即可.</li>
<li>两个空格强制换行</li>
<li>添加备注 <code>&lt;!-- 备注 --&gt;</code> <!-- This text will not appear in the browser window. --></li>
</ol>
<h1 id="LaTeX-公式"><a href="#LaTeX-公式" class="headerlink" title="LaTeX 公式"></a>LaTeX 公式</h1><h1 id="流程图-和-时序图"><a href="#流程图-和-时序图" class="headerlink" title="流程图 和 时序图"></a>流程图 和 时序图</h1><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li><a href="https://help.github.com/articles/basic-writing-and-formatting-syntax/" target="_blank" rel="external">Basic writing and formatting syntax</a></li>
<li><a href="http://www.markdowntutorial.com/" target="_blank" rel="external">Markdown Tutorial</a></li>
<li><a href="http://col.dog/2015/11/22/Markdown-Syntax/" target="_blank" rel="external">Markdown 语法基础及使用教程</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;@: [gitbookLearnBook, markdown_grammer] &lt;!-- gitbookLearnBook 为本地的书籍的标题 --&gt; &lt;!-- markdown_grammer为本地的.md名字 --&gt;&lt;/p&gt;
&lt;h1 id=&quot;分级标题&quot;&gt;&lt;a href=
    
    </summary>
    
      <category term="建站" scheme="http://mdeng1985.github.io/categories/%E5%BB%BA%E7%AB%99/"/>
    
    
      <category term="markdown" scheme="http://mdeng1985.github.io/tags/markdown/"/>
    
      <category term="github pages" scheme="http://mdeng1985.github.io/tags/github-pages/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://mdeng1985.github.io/2017/01/23/hello-world/"/>
    <id>http://mdeng1985.github.io/2017/01/23/hello-world/</id>
    <published>2017-01-23T14:17:42.100Z</published>
    <updated>2017-01-24T01:06:41.924Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<p>$$a=3^2+\sqrt(3)$$</p>
<h1 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h1><h2 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h2 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h2 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h2 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
